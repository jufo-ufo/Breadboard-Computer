================================================================

    Specification of the 16 bit homebrew von Neuman Machine    
            by Simon Walter & Alexander Wersching
                 last updated 11.05.2021

================================================================

1.1. Table of Contend

1. General Notes
    1.1 Table of Contend
    1.2 Update History
    1.3 Introduction
2. Basic schematic
3. Part specification
    3.1. BUS
    3.2. ALU
4. Hardware Refrences
5. Instruction set

================================================================

1.2. Update History

11.05.2021 by Alexander & Simon
    Added Basic schematic
    Added General Notes
    Added Part specification for BUS and ALU

12.05.2021 by Alexander & Simon
    Change Bus desgin from 48 to 64
    Change Bus Layout and added Intrup Lines

08.06.2021 by Alexander & Simon
    Added Spec for Clock
    Added basic Spec for instructions

================================================================

1.3. Introduction

This is first official iteration of the homebrew von Neuman Machine
aka Computer aka CPU (*1). This Reference sheet/Specification/Documenation 
should document and discripe the our self build CPU. This CPU is designed
for build with DIP IC and basic electronic compends eg Resistor, Capacitors
and Transistors. The components shall be mounted onto Printed circet
Board or PCBs.

This development process is driven by Simon Walter and Alexander Wersching
(Jufo Gymansium Puchheim)

Some simple an general rules always should hold true:

 - Reads on High, Writes on edge
 - High is defined as 3.3V - 5V
 - Low is defined as 0V - 0.7V
 - floating 0.7 - 3.3V should be avoided
 - for basic logic NAND gates are preffered

(*1) It's no really an CPU, because it should feature RAM or Memory
    and Input and Output devices

================================================================

2. Basic schematic

A basic schematic shall be provided now

+------------+      +-----+
|            |      | BUS |
|            |      |     |
|     CU   IR| <--- |     |
|            |      |     |
|            |      |     |
+------------+      |     |
                    |     |
        +---------- |     |
        |           |     |       +---------------+
        |           |     |       |               |
        \/          |     | <---- | Output Device |
+---------------+   |     |       |               |
|               |   |     |       +---------------+
| Register File |   |     |  
|               |   |     |       +---------------+
|               |   |     |       |               |
|               |   |     | ----> | Input  Device |
|               |   |     |       |               |
+---------------+   |     |       +---------------+
  |          |      |     |
  \/         \/     |     |       +--------------+
+---------------+   |     |       |              |  
|               |   |     | ----> | Data In      |
|      ALU      |   |     |       |              |
|               |   |     |       |              |
|   A   D       |   |     |       | Main  Memory |
+---------------+   |     |       |              |
    |   |           |     |       |              |
    |   +---------> |     | <---- | Data Out     |
    +-------------> |     | ----> | Address      |
                    +-----+       +--------------+    

===============================================================

3. Part specification

The following parts in the schematic now shall be described

3.1. BUS
    The Bus is an connecting point for every component in
    the CPU (besides Register File). The bus is an long
    circet Board with 64 parallel lines for data and address 
    transportation and for holding the CPU to gether.
    Every board is inserted perpendicular to the BUS for better
    use of space. 

           /|    /|    /|    /|
          / |   / |   / |   / |
       /=/  |==/  |==/  |==/  |===/
      /  |  /  |  /  |  /  |  /  / 
     /   | /   | /   | /   | /  /
    /    |/    |/    |/    |/  /
   /==========================/
     [Drawing of the bus PCB]
    
    
    The lines from 0-63 always should follow This
    structure:

[Ground] [Power] [Data] [Address] [Control] [unused] [Interupt set] [Intrupt ID] [ unused] [Clock] [Power] [Ground]
[   0  ] [  1  ] [2-18] [ 19-35 ] [ 36-44 ] [42-45 ] [     46     ] [   47-54  ] [ 55-60 ] [  61 ] [  62 ] [  63  ]

    Ground: 0V
    Power: 5V
    Data: General Data bus
    Address: The Address that gets feed to Main Memory
    Control: Operation ID transmission from CU to Module
    Interupt set: If an error/intrupt occurs this pin has to be set
    Interupt ID: 
    
    Control is connected to the CU for controlling every circet.
    Every circet has an unique ID that specifies the action/module.
    A module should test if the corresponding Data is put to
    the control lines. If the ID and data matches the Module is free
    to read or write data to the bus. Note that the rule "Writes on edge" 
    should always hold true. This is the reason the system clock is 
    exposed on the bus. Note that a module can have more then one Id 
    that is valid. For example the Memory module has one write and one 
    read ID. This system is put in places to insure maintainability 
    and flexibility.

3.2. ALU
    The ALU (Arithmetic and Logic Unit) is the calculating
    part of the Computer. It shall do the following jobs
    Adding, subtracting, bit shifting, xoring, anding, oring
    multiplying, differentiating (the big - small), comparing
    (>,<,=). As well as managing address and data flow

    For better developing, managing and trouble shotting the
    ALU should be build an an modular manner. Every operating
    eg. xor or add should be build as an separate PCB. This
    pcb should be inserted into the main ALU PCB.

    +----------------------------------------------+
    |                                              |
    |   +--------------------------------------+   |
    |   |                                      |   |
    |   |             Operation 0              |   |
    |   |                                      |   |
    |   +--------------------------------------+   |
    |   +--------------------------------------+   |
    |   |                                      |   |
    |   |             Operation 1              |   |
    |   |                                      |   |
    |   +--------------------------------------+   |
    |                                              |
    |                    . . .                     |
    |                                              |
    |   +--------------------------------------+   |
    |   |                                      |   |
    |   |             Operation n              |   |
    |   |                                      |   |
    |   +--------------------------------------+   |
    |                                              |
    +----------------------------------------------+

    Every Operation should be connected by the following
    standardized pin connector

    [Insert Drawing here]

3.3. CU

 The CU (or Controll Unit) is one of the most importent part. It's the component
 that Controlls everything. It has a number of jobs. loading the instrucitons from
 Memory, decoding them, and last execute them. Also some vitale circetries are localed
 here. for example the Clock Moduel
 
 3.3.1 Clock
 
 The Clock is like the heart beat of a humen, without nothing realy works. 
 The clock is an simpl osilator that produces a square wave like this
 
 ____----____----

The Clocks frequency should be due to current estimation be caped at around 200.000 Hz

But the clock is not some simple it acctualy should produce two signal
1. The Clock signal for Memory
2. The Clock signal for everything else

The singals should look like this

Clock 1 (200.000Hz) ____----____----____----____----____----____----____----
Clock 2 (100.000Hz) ________--------________--------________--------________

But why? Well Memory needs to clock cycles to do enything due to the the
virtual Memory System. It's much nices to work with an memory the respones
in clock cycle so, the simplest solution is the let memory run on a faster Clock

So the execution frequency is 100.000Hz

===============================================================

5. Instruction Set

The Instruction type featur four diffrent types of instructions

(I)    ins <r> <r> <r>
(II)   ins <r> <r>
(III)  ins <r> <r> <const>
(IV)   ins <r> <const>

Every instructuion is an double word (32 bit) pices of data.
This data contains first information about the instruction type,
instruction target, parameters and constants.

To furth specify the instructions length and positioning in
the double word:

(I)    [     0-7    ][   8-11  ][  12-15  ][  16-19  ]
       [Operation ID][Register1][Register2][Register3]
       
(II)   [     0-7    ][   8-11  ][  12-15  ][  16-31  ]
       [Operation ID][Register1][Register2][ unused  ]
       
(III)  [     0-7    ][   8-11  ][  12-15  ][  16-31  ]
       [Operation ID][Register1][Register2][ Const   ]
       
(IV)   [     0-7    ][   8-11  ][  12-15  ][  16-31  ]
       [Operation ID][Register1][ unused  ][ Const   ]

Please not that the operation ID corespons directly to ID that
is send to the individaual moduels.

------ WARNING by Alexander ------

There are some vital flaws in this setup. First the CU has no
Idea wich instruction type is realy used. One bit would help to
fix that. Sadly Instruction (III) uses all 32 bit so we need to
cut some corners some where. I suggest using one less bit for the
Operation ID

----------------------------------
